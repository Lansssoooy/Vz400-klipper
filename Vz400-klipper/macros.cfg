################################################################################################
################################################################################################
[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/Vz400/printer_data/klipper-backup/script.sh
timeout: 90.0
verbose: True

################################################################################################
################################################################################################
#####				MACROS					

[pause_resume]
recover_velocity: 350

##########################################################################################
#                     MACROS BELOW ARE USE FOR STATUS REPORT
##########################################################################################

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}



##########################################################################################
#                  MACROS BELOW ARE USE FOR PRINTING FUNCTIONALITY
##########################################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script
gcode:
    ; Clear existing bead mesh
    BED_MESH_CLEAR                      
    STATUS_HOMING
    STATUS_HOMING
    SET_LED LED=my_led WHITE=0.20 SYNC=0 TRANSMIT=1
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
    {% endif %}

      ; Get slicer parameters  
    #{% set BED_TEMP = params.BED_TEMP |default(80)|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP |default(235)|float %}
    #{% set CHAMBER_TEMP = params.CHAMBER_TEMP |default(50)|float %}

#Get Bed and Extruder temperature from Slicer GCode
    {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
    #Preheat nozzle and bed
    M104 S{EXTRUDER_TEMP} T0                        
    M140 S{BED_TEMP}   

    {% set COLOR = params.FILAMENT_COLOUR|default("XXX")|string %}

    PRINT MSG="Selected Print Color: {COLOR}"

    ; Set sliscer paremeters
    {% set PRINT_MIN = params.PRINT_MIN |default(0,0)|float %}
    {% set PRINT_MAX = params.PRINT_MAX |default(0,0)|float %}
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}


    {% set INITIAL_EXTRUDER = paramsINITIAL_EXTRUDER |default(0)|float %}
    
    ; Get the parameters from the [stepper X/Y] section in the printer.cfg
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
  
    ; Get the parameters from the [probe] section in the printer.cfg
    {% set S_Results = printer.configfile.config["probe"]["samples_result"] %}
    {% set S_Samples = printer.configfile.config["probe"]["samples"]|int %}
    {% set S_Speed = printer.configfile.config["probe"]["speed"]|float %}
    {% set S_Tolerances = printer.configfile.config["probe"]["samples_tolerance"]|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set S_Retraction = printer.configfile.config["probe"]["sample_retract_dist"]|float %}

    ; Clear pause mode if the print was pause
    #CLEAR_PAUSE
    ; reset feed rate
    #M220 S100                           
    ; Reset Z Offset      
    SET_GCODE_OFFSET Z=0 MOVE=1
    ; Set Part Fan Full Speed
    #M106 S255
    ; Report status
    PRINT MSG="Waiting for temperature"
    STATUS_HEATING 
    ; Set chamber temp
    #SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET={50}     
    ; Set bed temp           
    #M140 S{BED_TEMP}                   
    ; Set extruder temp
    #M104 S{EXTRUDER_TEMP}  
    ; Use absolute coordinates 
    G90 E0                              
    ; Wait for bed to reach temperature    
    M190 S{BED_TEMP}                    
    ; Wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}               
    #; Wait for Chamber to reach temperature
    #M191 S{CHAMBER_TEMP}              
       
       
   ; Stop heating the chamber
   # SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET={0}

     ; Check if the x and y axes have been homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      ; Report status
      PRINT MSG="Homing..."
      ; Homing
      G28
    {% endif %}
    
    ; Use absolute coordinates
    G90 
    STATUS_MESHING
    
    ; Report status
   # PRINT MSG="Cleaning Nozzle..."
    ; Clean Nozzle
    #CLEAN_NOZZLE
        
    ; Report status
    #PRINT MSG="QGL..."  
    ; Home Z
    #G28 Z

    ; Perfome a QGL
   # QUAD_GANTRY_LEVEL PARK=false

    ;Set Incretemental positioning
    G91
    ; Set Start Postion for Probing
    G0 X2 Y47 F5000  
    
    ; Report status
    #PRINT MSG="Building mesh..."
    ; Create Mesh base on the printing area
    #BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True
    #BED_MESH_CALIBRATE
     ; Load existing Bed Mesh
    BED_MESH_PROFILE LOAD=default    
    
    #; Report status
    #PRINT MSG="Applying Material Settings for {MATERIAL}"  
    #; Set Material Pressure Advance
    ## MATERIAL_PA MATERIAL={MATERIAL}   
    
    #Center the toolhead for Z_offset_calibration
    #G0 X{182} Y{242} F4000
    #GX 182 GY 242

    ; Report status
    STATUS_CALIBRATING_Z
    PRINT MSG="Calibrating Z-Offset..."

    ; Start Probing
    PROBE samples_result={S_Results} samples={S_Samples} speed={S_Speed} samples_tolerance={S_Tolerances} samples_tolerance_retries={S_Retries} sample_retract_dist={S_Retraction}
    ; Move to the next Probe Check
     _GET_Z_OFFSET  
    
    Detach_Probe   
    ; Report status
    PRINT MSG="Prime Line..."
    SET_CASE_LIGHT_OFF
    SET_CASE_LIGHT_OFF
    ; Print Prime Line
    PRIME_LINE 
    SET_FAN_SPEED FAN=Stepper_Fan SPEED=1                       
    
    ; Report status
    PRINT MSG="{printer.print_stats.filename}"
    STATUS_PRINTING
    SET_LED LED=my_led WHITE=0.01 SYNC=0 TRANSMIT=1


[gcode_macro PRIME_LINE]
gcode:
    {% set retract = 10 %}
    G1 Y10 X120 Z5 F12000             ; Move the nozzle to the front and near the bed
    G1 Z0.7 F300                      ; Move the nozzle very close to the bed
    G92 E0.0                          ; set extruder position to 0
    G1 E{retract} F3600               ; extrude retract
    G92 E0.0                          ; set extruder option to 0
    G1 X220 E15.0 F1500.0             ; intro line
    G92 E0.0                          ; set extruder Poisson to 0
    G1 Z2.0 F3000                     ; Move Z Axis up little to prevent scratching of Heat Beb
    G1 X220 F6000                     ; move away from intro line

[gcode_macro END_PRINT]
gcode:
        #Get Printer built volume dimensions
        {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
        {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}

        #Fix-up extruder
        G91                                            
        G1 E-2 F2700                                    
        G1 E-1.5 Z0.2 F2400                        
        G1 X5 Y5 F6000                               
        G1 Z10                                     
        G90                                        

        #Present print
        G1 Z{printer.toolhead.position.z + 10} F600
        G1 X{X_MAX / 2} Y{Y_MAX - 5} F6000
        M106 S0                                      
        M104 S0                                       
        M140 S0                                 

        #Disable Steppers
        M84 X Y E    
    STATUS_PART_READY
    SET_LED LED=my_led WHITE=0.20 SYNC=0 TRANSMIT=1
    SET_FAN_SPEED FAN=Stepper_Fan SPEED=0

##################
[gcode_macro TEST_SPEED]
gcode:
    STATUS_BUSY
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        Detach_Probe
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-5} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    STATUS_READY


[gcode_macro RETRACTION_UP]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float + 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}    

[gcode_macro RETRACTION_DOWN]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float - 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}   


#[gcode_macro SET_RETRACTIONLENGTH]
#gcode:
#  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
#  GET_RETRACTION

########################	
#[gcode_macro exhaustfan_on]
#gcode: 
#	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
#[gcode_macro exhaustfan_off]
#gcode: 
#	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
#[gcode_macro enclosurefan_on]
#gcode: 
#	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
#[gcode_macro enclosurefan_off]
#gcode: 
#	SET_FAN_SPEED FAN=chamber_fan SPEED=0


#[gcode_macro RSCS_on]
#gcode: 
#	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

#[gcode_macro RSCS_off]
#gcode: 
#	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

#[gcode_macro LED_on]
#gcode:
#	SET_PIN PIN=LED value=1   


#[gcode_macro LED_off]
#gcode:
#	SET_PIN PIN=LED value=0  

###	
	
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.002


#####

[gcode_macro POWER_OFF]
gcode:
  {action_call_remote_method("set_device_power",
                             device="tplink",
                             state="off")}
#####	

[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}


[gcode_macro ACCELL_TEST_X]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 10000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{minX} Y{minY} F{speed}  
        G1 X{maxX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 
	
	
	
[gcode_macro ACCELL_TEST_Y]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 10000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{maxX} Y{minY} F{speed}  
        G1 X{minX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 


##########################################################################################
#                     MACROS BELOW ARE USE FOR SERVO IN/OUT
##########################################################################################

[gcode_macro SERVO_IN]
gcode:
    SET_SERVO SERVO=Euclid_servo ANGLE=60

[gcode_macro SERVO_OUT]
gcode:
    SET_SERVO SERVO=Euclid_servo ANGLE=0

##########################################################################################
##########################################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

##########################################################################################
##########################################################################################

[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
description: 
gcode:
    {% set V = printer["gcode_macro User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Screws Tilt Adjust") }
    {% endif %}

    _CheckProbe action=query
	G90
    Attach_Probe
    STATUS_LEVELING

    _SCREWS_TILT_CALCULATE {% for p in params
          %}{'%s=%s ' % (p, params[p])}{%
         endfor %}

    Detach_Probe 


[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

