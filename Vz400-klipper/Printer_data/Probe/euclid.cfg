
#============================== VARIABLES ==============================
#==================Changes accordentlly to your needs===================

[gcode_macro EuclidProbe]
description: config vars for Euclid probe deploy/stow

# Bed Size
variable_bed_size_X: 350
variable_bed_size_Y: 390

# Homing Override
variable_position_homing_x: 278
variable_position_homing_y: 360

# Attach Probe
variable_position_attach_x: 340
variable_position_attach_y: 375
variable_position_attach_z:  25.00
variable_position_slideout: 251.00

# Detach Probe
variable_position_detach_x: 340
variable_position_detach_y: 375
variable_position_detach_z:   0.00 # Change to lift up once the probe is attached (usefull if you are working with bed dock)
variable_position_slidein:  200

# Bed Clearance
variable_homing_clearance: 15
variable_save_distance: 331

# Moving Speeds
variable_homing_speed: 5000
variable_attach_speed: 10000
variable_detach_speed: 10000
variable_move_speed:  20000

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'] }"

[gcode_macro PROBE_CONFIG]
variable_ticks: 0
variable_reset_ticks: 10
variable_delay_ticks: 60

gcode:
  RESPOND PREFIX="info" MSG="Probe > Config ..."

[force_move]
enable_force_move: true

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}

#========================================= MACROS ========================================
#================Dont changes anything if you don't know what you are doing===============
#=========================================================================================

##########################################################################################
#                                     HOME OVERRIDE
##########################################################################################

[homing_override]
axes: z
gcode:
  ; ensure servo is in
  SERVO_IN

  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

  {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
  {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}

  {% if printer.toolhead.homed_axes != "xyz" %} ; Home if not already homed
      SET_KINEMATIC_POSITION Z=0
  {% endif %}
   G90
  ; check if we have alrady homed
  {% if not 'xy' in printer.toolhead.homed_axes %}
    ; home Y & Y
    G28 X Y
  {% endif %}
  QUERY_PROBE
  ; check if we got the probe attached
  {% if printer.probe.last_query %}
      ; move y forward for Euclid Attching
      G0 Y{ euclid_probe.save_distance }
      ; attach the probe
      Attach_Probe
  {% else %}
          ; move y forward for Euclid Attching
      G0 Y{ euclid_probe.save_distance }
      ; attach the probe
      Attach_Probe
  {% endif %}
  ; center x and y position
  G0 X{X_MID} Y{Y_MID} F4000
  ; home Z
  G28 Z
  ; raise over the bed to 15
  G0 Z{ euclid_probe.homing_clearance } F{ euclid_probe.homing_speed }

##### ATTACH/DETACH PROBE #####

# Deploy Bed Euclid Probe
[gcode_macro Attach_Probe]
gcode:
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  G90
  QUERY_PROBE
  STATUS_BUSY
  {% if printer.probe.last_query %}
      G0 Z{25}
      SERVO_OUT
      ; Move to the probe docking location
      G0 X{ euclid_probe.position_attach_x } F{ euclid_probe.attach_speed }
      M400            
      G0 Y{ euclid_probe.position_attach_y }  F{ euclid_probe.attach_speed }
      M400
      ; Attache the probe
      G0 Z{ euclid_probe.position_attach_z }                                                
      M400
      ; Slide out the probe
      G0 X{ euclid_probe.position_slideout } Y{ euclid_probe.position_attach_y } F{ euclid_probe.attach_speed }     
      M400
      ; Move probe to save distance
      G0 Y{ euclid_probe.save_distance }                                                
      SERVO_IN
      G0 Z{15}
      error_if_probe_not_deployed
    {% endif %}
  STATUS_READY

# Stow Bed Euclid Probe
[gcode_macro Detach_Probe]
gcode:
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  G90
  QUERY_PROBE
  STATUS_BUSY
    {% if not printer.probe.last_query %}
      G0 Z{25}
       SERVO_OUT
     ; Slide probe back into the dock
      G0 Y{ euclid_probe.position_attach_y } X{ euclid_probe.position_slideout } F{ euclid_probe.attach_speed }     
      M400
     ; Move to the probe location
      G0 Y{ euclid_probe.position_detach_y } X{ euclid_probe.position_detach_x } F{ euclid_probe.detach_speed }
      M400
     ; Move Z-Axis to save location
      G0 Y{ euclid_probe.save_distance }
      SERVO_IN
      G0 Z{10}
      error_if_probe_deployed
      UPDATE_DELAYED_GCODE ID=PROBE_PARK_LATER_TICK DURATION=0
    {% endif %}
  STATUS_READY

##### PROBE SAFTY CHECKS #####

[gcode_macro error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    do_error_if_probe_deployed

[gcode_macro do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
      {action_raise_error("probe already deployed - remove and return to dock")}
    {% endif %}

[gcode_macro error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    do_error_if_probe_not_deployed

[gcode_macro do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
      {action_raise_error("probe unsuccessfully deployed")}
    {% endif %}

##### PROBE DETACH DELAY #####

[gcode_macro PROBE_PARK_LATER]
gcode:
  #RESPOND PREFIX="info" MSG="Probe > Park Later > Restart Timer to {printer['gcode_macro PROBE_CONFIG'].reset_ticks}"
  PRINT MSG="Probe > Park Later > Restart Timer to {printer['gcode_macro PROBE_CONFIG'].reset_ticks}"
  SET_GCODE_VARIABLE MACRO=PROBE_CONFIG VARIABLE=ticks VALUE={printer['gcode_macro PROBE_CONFIG'].reset_ticks}
  UPDATE_DELAYED_GCODE ID=PROBE_PARK_LATER_TICK DURATION={printer['gcode_macro PROBE_CONFIG'].delay_ticks}
  QUERY_PROBE

[delayed_gcode PROBE_PARK_LATER_TICK]
initial_duration: 0
gcode:
  SET_GCODE_VARIABLE MACRO=PROBE_CONFIG VARIABLE=ticks VALUE={printer['gcode_macro PROBE_CONFIG'].ticks - 1}
  {% if printer['gcode_macro PROBE_CONFIG'].ticks <=1 %}
    #RESPOND PREFIX="info" MSG="Probe > Park Later > Ticking limits reached, parking probe..."
    PRINT MSG="Probe > Park Later > Ticking limits reached, parking probe..."
    Detach_Probe
      ; Report status
    PRINT MSG="{printer.print_stats.filename}"
  {% else %}
    ## tick one more time
    #RESPOND PREFIX="info" MSG="Probe > Park Later > Ticking - {printer['gcode_macro PROBE_CONFIG'].ticks - 1}"
    PRINT MSG="Probe > Park Later > Ticking - {printer['gcode_macro PROBE_CONFIG'].ticks - 1}"
    UPDATE_DELAYED_GCODE ID=PROBE_PARK_LATER_TICK DURATION={printer['gcode_macro PROBE_CONFIG'].delay_ticks}
  {% endif %}

# gcode doing actual parking called by PROBE_PARK after some checks
[gcode_macro PROBE_PARK_FORCE]
gcode:
  ## disable later parking timer if it's working
  UPDATE_DELAYED_GCODE ID=PROBE_PARK_LATER_TICK DURATION=0
  QUERY_PROBE
  Detach_Probe

##### FUNCTIONS #####

[gcode_macro CHECK_PROBE_ACCURACY]
gcode:
  {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
  QUERY_PROBE
  Attach_Probe
  {% set Z = params.Z|default(30)|float %}
  SAVE_GCODE_STATE NAME=PARKCENTER_state
  ; Home if not already homed
  _CG28
  ; absolute positioning
  G90
  ; move to center
  G0 X{ euclid_probe.bed_size_x/2 } Y{ euclid_probe.bed_size_y/2 } Z{Z} F{ euclid_probe.variable_homing_speed }
  PROBE_ACCURACY
  Detach_Probe


##########################################################################################
#                    MACRO BELOW IS USE FOR THE Z-OFFSET CALIBRATION
##########################################################################################

[gcode_macro _GET_Z_OFFSET]
gcode:

    {% set PASS = printer.probe.last_z_result %}
    {% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}

    PRINT MSG="Current Probing is: {PASS}"
    PRINT MSG="Z-Probe Offset is: {ZP_CAL}"
    PRINT MSG="Difference: {Z_DIFFERENCE}"
    PRINT MSG="Setting current Z_Height of {NEW_CURRENT_Z} to {Z_POS}"

    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P1000
    PRINT MSG="Difference: Moving nozzle to newly adjusted Z15."
    G0 Z15 F500
    G4 P1000
    BED_MESH_PROFILE LOAD=default
    PRINT MSG="Applied Default mesh post sampling."
    QUERY_PROBE
   {% if not printer.probe.last_query %}
        PRINT MSG="Detaching Euclid Probe."
        Detach_Probe
      {% else %}
        PRINT MSG="?!Probe is not attached."
    {% endif %}
